FEATURES {
    STARTADDRESS: default = $0400;
}
SYMBOLS {
    __LOADADDR__: type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}
MEMORY {
    ZP:       file = "", start = $0002,  size = $00FE,      define = yes;
    CPUSTACK: file = "", start = $0100,  size = $0100;
    LOADADDR: file = %O, start = %S - 2, size = $0002;
    RAM:      file = %O, start = %S,     size = $6000 - __STACKSIZE__ - %S;
    VRAM:     file = "", start = $6000,  size = $2000;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp,  optional = yes;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = RAM,     type = ro,  optional = yes;
    CODE:     load = RAM,     type = rw;
    RODATA:   load = RAM,     type = ro,  optional = yes;
    DATA:     load = RAM,     type = rw,  optional = yes;
    # gfx data is aligned to page boundary
    GFX_DATA:     load = RAM,     type = rw, align = $100, optional = yes;
    BSS:      load = RAM,     type = bss, optional = yes, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
#    CONDES: type    = interruptor,
#            label   = __INTERRUPTOR_TABLE__,
#            count   = __INTERRUPTOR_COUNT__,
#            segment = RODATA,
#            import  = __CALLIRQ__;
}
